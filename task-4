import tkinter as tk
from tkinter import messagebox

class TicTacToe:
    def __init__(self, root):
        self.root = root
        self.root.title("Tic Tac Toe")
        self.board = [["" for _ in range(3)] for _ in range(3)]
        self.current_player = "X"
        self.buttons = [[None for _ in range(3)] for _ in range(3)]

        self.create_board()
        
    def create_board(self):
        for row in range(3):
            for col in range(3):
                button = tk.Button(self.root, text="", font=("Arial", 24), width=5, height=2,
                                   command=lambda r=row, c=col: self.make_move(r, c))
                button.grid(row=row, column=col, padx=5, pady=5)
                self.buttons[row][col] = button

        reset_button = tk.Button(self.root, text="Reset", font=("Arial", 16), command=self.reset_game)
        reset_button.grid(row=3, column=0, columnspan=3, pady=10)

    def make_move(self, row, col):
        if self.board[row][col] == "" and not self.check_winner():
            self.board[row][col] = self.current_player
            self.buttons[row][col].config(text=self.current_player)

            if self.check_winner():
                messagebox.showinfo("Game Over", f"Player {self.current_player} wins!")
                return
            
            if self.is_draw():
                messagebox.showinfo("Game Over", "It's a Draw!")
                return
            
            self.current_player = "O" if self.current_player == "X" else "X"

    def check_winner(self):
        for i in range(3):
            if self.board[i][0] == self.board[i][1] == self.board[i][2] != "":
                return True  # Row win
            if self.board[0][i] == self.board[1][i] == self.board[2][i] != "":
                return True  # Column win

        if self.board[0][0] == self.board[1][1] == self.board[2][2] != "":
            return True  # Diagonal win

        if self.board[0][2] == self.board[1][1] == self.board[2][0] != "":
            return True  # Anti-diagonal win

        return False

    def is_draw(self):
        return all(self.board[row][col] != "" for row in range(3) for col in range(3))

    def reset_game(self):
        self.board = [["" for _ in range(3)] for _ in range(3)]
        self.current_player = "X"

        for row in range(3):
            for col in range(3):
                self.buttons[row][col].config(text="")

def main():
    root = tk.Tk()
    TicTacToe(root)
    root.mainloop()

if __name__ == "__main__":
    main()
